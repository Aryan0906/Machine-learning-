# -*- coding: utf-8 -*-
"""Ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19xs1n4nhfZhKiP0HVUmkj8UKT0hHGGBG

My First Ml project
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/lucib3196/Machine_Learning_Projects/5b6476ef573bbf8bd4dfd3b8d1124f98b65db310/data/delaney_solubility_with_descriptors.csv')
df

"""### Data perparation

### Data separation
"""

y = df['logS']
y

x = df.drop('logS', axis=1)
x

"""### Data spliting

"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

x_train

x_test

# @title MolLogP

from matplotlib import pyplot as plt
x_test['MolLogP'].plot(kind='hist', bins=20, title='MolLogP')
plt.gca().spines[['top', 'right',]].set_visible(False)

"""### Model building

### Linear regression

Traning the model
"""

import sklearn.linear_model as lm

model = lm.LinearRegression()
model.fit(x_train, y_train)

"""Applying the model to make a perdiction"""

y_pred_tarin = model.predict(x_train)
y_pred_test = model.predict(x_test)

y_pred_tarin

y_pred_test

"""Evaluate model performace"""

from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd

# Assuming model, x_train, y_train, x_test, y_test are already defined
y_pred_train = model.predict(x_train)
y_pred_test = model.predict(x_test)

train_r2 = r2_score(y_train, y_pred_train)
test_r2 = r2_score(y_test, y_pred_test)

train_mse = mean_squared_error(y_train, y_pred_train)
test_mse = mean_squared_error(y_test, y_pred_test)
y_results = pd.DataFrame({
    'Method': ['Linear Regression'],
    'Training MSE': [train_mse],
    'Training R2': [train_r2],
    'Test MSE': [test_mse],
    'Test R2': [test_r2]
})

y_results

"""### Random forest"""

from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(x_train, y_train)

"""### Applying the model to make perdiction"""

y_pred_tarin = model.predict(x_train)
y_pred_test = model.predict(x_test)

"""### Evaluate model perforamce"""

from sklearn.metrics import mean_squared_error, r2_score
rf_tarin_mse = mean_squared_error(y_train, y_pred_tarin)
rf_test_mse = mean_squared_error(y_test, y_pred_test)
rf_train_r2 = r2_score(y_train, y_pred_tarin)
rf_test_r2 = r2_score(y_test, y_pred_test)

import pandas as pd
rf_result = pd.DataFrame({
    'Method': ['Random Forest'],
    'Training MSE': [rf_tarin_mse],
    'Training R2': [rf_train_r2],
    'Test MSE': [rf_test_mse],
    'Test R2': [rf_test_r2]
})
y_results = pd.concat([y_results, rf_result], ignore_index=True)
y_results

df_models = pd.concat([y_results, rf_result], axis =0)
df_models

# @title Method

from matplotlib import pyplot as plt
import seaborn as sns
df_models.groupby('Method').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

"""### Data visulaization of perdication result"""

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.scatter(x=y_train, y=y_pred_tarin, alpha =0.3)
plt.plot(y_train, y_train, color='red')
plt.xlabel('Experimental logS')
plt.ylabel('Predicted logS')
plt.title('Experimental vs Predicted logS')
plt.plot()
plt.gca().spines[['top', 'right',]].set_visible(False)

plt.show()

